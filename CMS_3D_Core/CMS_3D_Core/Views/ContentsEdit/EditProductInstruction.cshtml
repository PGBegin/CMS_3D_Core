@model CMS_3D_Core.Models.EDM.t_article

@{
    ViewData["Title"] = "EditProductInstruction";
}

<h1>@Model.title</h1>

<p class="text-info">
    @ViewBag.ResultMsg
</p>


<div class="row">


    <div class="col-md-6">

        <div id="model_screen">
            @*モデルの表示領域*@
        </div>
        @* 表示専用ビューならこうなってる

        <div id="instruction_data">
            <h4 id="instruction_title"></h4>
            <div id="instruction_short_description">

            </div>
        </div>
        *@

        <hr />


        <div id="control_panel_zone">
        </div>


        <hr />
        <h4> Instruction Edit</h4>
        <div id="instruction_data">

            <form asp-action="EditProductInstruction">
                <div class="form-group row ">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                    @*インストラクションの文書表示領域*@
                    @Html.Hidden("id_article", 0, new { id = "instruction_id_article" })


                    <div class="col-sm-2">
                        @Html.Label("id_instruct", "Indstuction Id", htmlAttributes: new { @class = "control-label font-weight-bold" })
                        <div class="px-3">
                            @Html.TextBox("id_instruct", "", new { id = "instruction_id_instruct", @class = "form-control" })
                        </div>
                    </div>

                    <div class="col-sm-3">
                        @Html.Label("title", "Title(Button Name)", htmlAttributes: new { @class = "control-label font-weight-bold" })
                        <div class="px-3">
                            @Html.TextBox("title", "", new { id = "instruction_title", @class = "form-control" })
                        </div>
                    </div>

                    <div class="col-sm-2">
                        @Html.Label("id_view", "Id View", htmlAttributes: new { @class = "control-label font-weight-bold" })
                        <div class="px-3">
                            @Html.TextBox("id_view", "", new { id = "instruction_id_view", @class = "form-control" })
                        </div>
                    </div>

                    <div class="col-sm-2">
                        @Html.Label("display_order", "Display Order", htmlAttributes: new { @class = "control-label font-weight-bold" })
                        <div class="px-3">
                            @Html.TextBox("display_order", "", new { id = "instruction_display_order", @class = "form-control" })
                        </div>
                    </div>

                    <div class="col-sm-12">
                        @Html.Label("short_description", "Description", htmlAttributes: new { @class = "control-label font-weight-bold" })
                        <div class="px-3">
                            @Html.TextArea("short_description", null, new { id = "instruction_short_description", rows = "10", @class = "form-control" })
                        </div>
                    </div>

                    <div class="col-sm-12">
                        @Html.Label("memo", "MEMO", htmlAttributes: new { @class = "control-label font-weight-bold" })
                        <div class="px-3">
                            @Html.TextArea("memo", null, new { id = "instruction_memo", rows = "10", @class = "form-control" })
                        </div>
                    </div>
                    

                    <div class="col-sm-8">
                        @Html.Label("", "", htmlAttributes: new { @class = "control-label font-weight-bold" })
                        <div class="px-3">
                            <input type="submit" value="Save" class="btn btn-primary" onclick="return confirm('説明文を更新しますか？')" />
                        </div>
                    </div>

                </div>
            </form>


            <form asp-action="DeleteProductInstruction">
                <div class="form-group row ">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                    @*インストラクションの文書表示領域*@
                    @Html.Hidden("id_article", 0, new { id = "instruction_id_article_delete" })
                    @Html.Hidden("id_instruct", 0, new { id = "instruction_id_instruct_delete" })


                    <div class="col-sm-8">
                        @Html.Label("", "", htmlAttributes: new { @class = "control-label font-weight-bold" })
                        <div class="px-3">
                            <input type="submit" value="Delete" class="btn btn-danger" onclick="return confirm('説明文を更新しますか？')" />
                        </div>
                    </div>

                </div>
            </form>


        </div>


        <hr />
    </div>


    <div class="col-md-4">
        <h4> View Info and Edit</h4>

        <div id="view_data">



            <form asp-action="EditProductView">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                <div class="form-group row ">


                    @Html.Hidden("id_article", 0, new { id = "view_id_article" })
                    @*
                    @Html.Hidden("id_view", 0, new { id = "view_id_view" })
                    <input id="view_id_view" name="id_view" type="text" value="" class="form-control" />
                    <input id="view_title" name="title" type="text" value="" class="form-control" />

                    *@



                    <div class="col-sm-2">
                        @Html.Label("id_view", "ID View", htmlAttributes: new { @class = "control-label font-weight-bold" })
                        <div class="px-3">
                            @Html.TextBox("id_view", "", new { id = "view_id_view", @class = "form-control" })
                        </div>
                    </div>

                    <div class="col-sm-6">
                        @Html.Label("title", "ビュータイトル(title)", htmlAttributes: new { @class = "control-label font-weight-bold" })
                        <div class="px-3">
                            @Html.TextBox("title", "", new { id = "view_title", @class = "form-control" })
                        </div>
                    </div>

                </div>

                <table class="table">
                    <tr>
                        <th>
                            Elementname
                        </th>
                        <th>
                            X
                        </th>
                        <th>
                            Y
                        </th>
                        <th>
                            Z
                        </th>
                        <th>
                            W
                        </th>
                    </tr>
                    <tr>
                        <td>
                            Camera Position
                        </td>
                        <td>
                            <input id="cam_pos_x" name="cam_pos_x" type="text" value="" class="form-control" />
                        </td>
                        <td>
                            <input id="cam_pos_y" name="cam_pos_y" type="text" value="" class="form-control" />
                        </td>
                        <td>
                            <input id="cam_pos_z" name="cam_pos_z" type="text" value="" class="form-control" />
                        </td>
                        <td>
                            --
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Camera Look At
                        </td>
                        <td>
                            <input id="cam_lookat_x" name="cam_lookat_x" type="text" value="" class="form-control" />
                        </td>
                        <td>
                            <input id="cam_lookat_y" name="cam_lookat_y" type="text" value="" class="form-control" />
                        </td>
                        <td>
                            <input id="cam_lookat_z" name="cam_lookat_z" type="text" value="" class="form-control" />
                        </td>
                        <td>
                            --
                        </td>
                    </tr>
                    <tr>
                        <td>
                            Camera Quaternion
                        </td>
                        <td>
                            <input id="cam_quat_x" name="cam_quat_x" type="text" value="" class="form-control" />
                        </td>
                        <td>
                            <input id="cam_quat_y" name="cam_quat_y" type="text" value="" class="form-control" />
                        </td>
                        <td>
                            <input id="cam_quat_z" name="cam_quat_z" type="text" value="" class="form-control" />
                        </td>
                        <td>
                            <input id="cam_quat_w" name="cam_quat_w" type="text" value="" class="form-control" />
                        </td>
                    </tr>
                    <tr>
                    <tr>
                        <td>
                            Orbit Control Target
                        </td>
                        <td>
                            <input id="obt_target_x" name="obt_target_x" type="text" value="" class="form-control" />
                        </td>
                        <td>
                            <input id="obt_target_y" name="obt_target_y" type="text" value="" class="form-control" />
                        </td>
                        <td>
                            <input id="obt_target_z" name="obt_target_z" type="text" value="" class="form-control" />
                        </td>
                        <td>
                            --
                        </td>
                    </tr>
                </table>


                <div class="form-group">
                    <input type="submit" value="Save" class="btn btn-primary" onclick="return confirm('視点情報を更新しますか？')" />
                </div>
            </form>


            @*ビューの削除
            <form asp-action="DeleteProductView">
                <div class="form-group row ">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>


                    @Html.Hidden("id_assy", 0, new { id = "view_id_assy_delete" })
                    @Html.Hidden("id_view", 0, new { id = "view_id_view_delete" })

                    <div class="col-sm-8">
                        @Html.Label("", "", htmlAttributes: new { @class = "control-label font-weight-bold" })
                        <div class="px-3">
                            <input type="submit" value="Delete" class="btn btn-danger" onclick="return confirm('視点情報を削除しますか？')" />
                        </div>
                    </div>

                </div>
            </form>
            *@
            @Html.ActionLink("View", "Index", "t_view", new { id_article = Model.id_article })
        </div>



        @await Component.InvokeAsync("ViewList", new { id_article = Model.id_article })


        <hr />

        <h4> View Info and Edit</h4>

        @await Component.InvokeAsync("EditArticle", new { id_article = Model.id_article })
    </div>
</div>
        @*<div id="content"></div>*@

<script src="~/lib/three/three.js"></script>
<script src="~/lib/three/Loader/GLTFLoader.js"></script>
<script src="~/lib/three/Loader/OBJLoader.js"></script>
<script src="~/lib/three/Loader/MTLLoader.js"></script>
<script src="~/lib/three/OrbitControls.js"></script>
<script src="~/lib/marked/marked.js"></script>
<script src="~/js/operation_3d_instructor.js"></script>


<script type="text/javascript">


    var camera_main;
    var scene = new THREE.Scene();
    var controls;

    var gridHelper;
    var axisHelper;
    var lightHelper;

    var light;
    var ambient;
    var renderer;
    var width = 720;
    var height = 405;

    var view_object = [];
    var instruction_gp = [];
    var instance_part = [];



    // ロード後に実行される処理
    window.onload = function () {
        'use strict';

        var str_url_prodobjectapi_base = "/ContentsOperatorApis/GetAssemblyObjectList?";
        var str_url_prodobjectapi = str_url_prodobjectapi_base + new URLSearchParams({ id_article: @Model.id_article }).toString();

        var str_url_partapi_base = "/ContentsOperatorApis/GetPartObjectFile?";

        const glfLoader = new THREE.GLTFLoader();


        //指定urlからデータを取得
        fetch(str_url_prodobjectapi)
            .then(response => {

                return response.json();

            })
            .then(data => { // 処理が成功した場合に取得されるJSONデータ

                //JSONのデータを各オブジェクトに詰め替える
                data_inmprt(data, view_object, instruction_gp, instance_part);

                //コントロールパネル領域を生成する
                setup_control_panel_zone("control_panel_zone", instruction_gp);


                //データモデルを取得する
                setup_instance_part_model(str_url_partapi_base, instance_part, glfLoader, scene);


                initial_optional01();
                initial_setup_and_render();
                //initial_setup_and_render2(scene, camera_main, controls, light, ambient, renderer, width, height);

            })
            .catch(error => { // エラーの場合の処理

                console.log(error);

            });

    }

    //指定されたIDのインストラクションを表示する
    function transition_instruction(id_instruct) {
        'use strict';



        //カメラ位置の変更
        //---------------------
        var i = instruction_gp[id_instruct].id_view;
        controls.reset();

        set_camera(camera_main, view_object[i].cam_pos_x, view_object[i].cam_pos_y, view_object[i].cam_pos_z,
            new THREE.Quaternion(view_object[i].cam_quat_x, view_object[i].cam_quat_y, view_object[i].cam_quat_z, view_object[i].cam_quat_w));

        controls.target.set(view_object[i].obt_target_x, view_object[i].obt_target_y, view_object[i].obt_target_z);
        controls.update();
        //---------------------

        //タイトルの表示
        var node_temp;

        //
        //インストラクション(編集)関連の標記
        document.getElementById('instruction_title').value = instruction_gp[id_instruct].title;
        document.getElementById('instruction_id_view').value = instruction_gp[id_instruct].id_view;
        document.getElementById('instruction_short_description').textContent = instruction_gp[id_instruct].short_description;
        document.getElementById('instruction_id_article').value = instruction_gp[id_instruct].id_article;
        document.getElementById('instruction_id_instruct').value = instruction_gp[id_instruct].id_instruct;
        document.getElementById('instruction_display_order').value = instruction_gp[id_instruct].display_order;
        document.getElementById('instruction_memo').value = instruction_gp[id_instruct].memo;



        //インストラクション(削除)関連の標記
        document.getElementById('instruction_id_article_delete').value = instruction_gp[id_instruct].id_article;
        document.getElementById('instruction_id_instruct_delete').value = instruction_gp[id_instruct].id_instruct;

        //ビュー情報を更新
        document.getElementById('view_id_article').value = view_object[i].id_article;
        document.getElementById('view_id_view').value = view_object[i].id_view;
        document.getElementById('view_title').value = view_object[i].title;


        //削除用ビュー情報を更新
        //document.getElementById('view_id_assy_delete').value = view_object[i].id_assy;
        //document.getElementById('view_id_view_delete').value = view_object[i].id_view;


    }


    //表示関連を初期化する
    function initial_setup_and_render() {
        'use strict';

        // light
        light = new THREE.DirectionalLight(0xffffff, 1);
        light.position.set(0, 100, 30);
        scene.add(light);


        ambient = new THREE.AmbientLight(0x404040, 1);
        scene.add(ambient);

        // main camara
        camera_main = new THREE.PerspectiveCamera(45, width / height, 1, 1000);
        set_camera(camera_main, 30, 30, 30, new THREE.Quaternion(0.017, 0.168, -0.003, 0.985));

        // renderer
        renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(width, height);
        renderer.setClearColor(0xefefef);
        renderer.setPixelRatio(window.devicePixelRatio);
        document.getElementById('model_screen').appendChild(renderer.domElement);


        controls = new THREE.OrbitControls(camera_main, renderer.domElement);


        function render() {
            requestAnimationFrame(render);

            update_viewinfo();

            controls.update();
            renderer.render(scene, camera_main);
        }
        render();

    };



    //表示関連を初期化する
    function initial_optional01() {
        'use strict';


        //helper
        /*
        gridHelper = new THREE.GridHelper(200, 50);
        scene.add(gridHelper);


        axisHelper = new THREE.AxisHelper(1000);
        scene.add(axisHelper);
        */

        //lightHelper = new THREE.DirectionalLightHelper(light, 20);
        //scene.add(lightHelper);
    };

    function update_viewinfo() {


        document.getElementById('cam_pos_x').value = Math.floor(camera_main.position.x * 100) / 100;
        document.getElementById('cam_pos_y').value = Math.floor(camera_main.position.y * 100) / 100;
        document.getElementById('cam_pos_z').value = Math.floor(camera_main.position.z * 100) / 100;

        document.getElementById('cam_lookat_x').value = 0;
        document.getElementById('cam_lookat_y').value = 0;
        document.getElementById('cam_lookat_z').value = 0;

        document.getElementById('cam_quat_x').value = Math.floor(camera_main.quaternion.x * 1000) / 1000;
        document.getElementById('cam_quat_y').value = Math.floor(camera_main.quaternion.y * 1000) / 1000;
        document.getElementById('cam_quat_z').value = Math.floor(camera_main.quaternion.z * 1000) / 1000;
        document.getElementById('cam_quat_w').value = Math.floor(camera_main.quaternion.w * 1000) / 1000;

        document.getElementById('obt_target_x').value = Math.floor(controls.target.x * 100) / 100;
        document.getElementById('obt_target_y').value = Math.floor(controls.target.y * 100) / 100;
        document.getElementById('obt_target_z').value = Math.floor(controls.target.z * 100) / 100;

    }


        </script>
