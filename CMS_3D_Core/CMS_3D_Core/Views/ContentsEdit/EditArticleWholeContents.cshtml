@model CMS_3D_Core.Models.EDM.t_article

@{
    ViewData["Title"] = "EditProductInstruction";
}

<h1>@Model.title</h1>

<p class="text-info">
    @ViewBag.ResultMsg
</p>


<div class="row">


    <div class="col-md-5">

        @*モデルの表示領域*@
        <div id="model_screen">
        </div>

        <div class="progress" id="div_progressbar_modeldl">
            <div class="progress-bar" role="progressbar" style="width: 0%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100" id="progressbar_modeldl"></div>
        </div>
        <hr />

        <div id="control_panel_zone">
        </div>

        @*表示用ビューならここにインストラクションの表示領域がある*@

    </div>


    <div class="col-md-6">
        <nav>
            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                <a class="nav-link active" id="nav-instruction-tab" data-bs-toggle="tab" href="#nav-instruction">Instruction</a>
                <a class="nav-link" id="nav-home-tab" data-bs-toggle="tab" href="#nav-viewinfo">View</a>
                <a class="nav-link" id="nav-profile-tab" data-bs-toggle="tab" href="#nav-articlebase">Article Base</a>
                <a class="nav-link" id="nav-thumbnail-tab" data-bs-toggle="tab" href="#nav-thumbnail">Thumbnail</a>
            </div>
        </nav>
        <div class="tab-content" id="nav-tabContent">
            <div class="tab-pane fade show active" id="nav-instruction">
                @await Component.InvokeAsync("EditProductInstruction", new { id_article = Model.id_article })
            </div>

            <div class="tab-pane fade" id="nav-viewinfo">

                <h4> View Info and Edit</h4>

                @await Component.InvokeAsync("EditProductView", new { id_article = Model.id_article })


                @await Component.InvokeAsync("ViewList", new { id_article = Model.id_article })


                @Html.ActionLink("View", "Index", "t_view", new { id_article = Model.id_article })


            </div>
            <div class="tab-pane fade" id="nav-articlebase">

                <h4> View Info and Edit</h4>

                @await Component.InvokeAsync("EditArticle", new { id_article = Model.id_article })

            </div>
            <div class="tab-pane fade" id="nav-thumbnail">

                <h4>Thumbnail</h4>

                @await Component.InvokeAsync("EditThumbnail", new { id_article = Model.id_article })

                @*------------

        <div id="view_capture">
        </div>



                <button id="screenshot" type="button" onclick="GetScreenshotForUpload('view_capture', 'getimage', 'up_img_input')" class="btn btn-primary">Save...</button>
                <div class="row">
                    <div class="col-md-4">
                        <form asp-action="UpdateThumbnail" enctype="multipart/form-data">
                            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                            <input type="hidden" asp-for="id_article" />
                            <input type="hidden" name="imgfilebin" id="up_img_input" />

                            <div class="form-group">
                                <input type="submit" value="Create" class="btn btn-primary" id="up_img_submit" disabled />
                            </div>
                        </form>
                    </div>
                </div>

                -------------------------------------------------------------------------------------------------*@

            </div>
        </div>

    </div>

</div>

<script src="~/lib/three/three.js"></script>
<script src="~/lib/three/Loader/GLTFLoader.js"></script>
<script src="~/lib/three/Loader/OBJLoader.js"></script>
<script src="~/lib/three/Loader/MTLLoader.js"></script>
<script src="~/lib/three/OrbitControls.js"></script>
<script src="~/lib/marked/marked.js"></script>
<script src="~/js/tdarticle.js"></script>
<script src="~/js/GetScreenshotForUpload.js"></script>


<script type="text/javascript">


    var adarticle = new TDArticle();


    // ロード後に実行される処理
    window.onload = function () {
        'use strict';

        let str_url_prodobjectapi_base = "/ContentsOperatorApis/GetAssemblyObjectList?";
        let str_url_prodobjectapi = str_url_prodobjectapi_base + new URLSearchParams({ id_article: @Model.id_article }).toString();

        let str_url_partapi_base = "/ContentsOperatorApis/GetPartObjectFile?";

        //const glfLoader = new THREE.GLTFLoader();

        let id_startinst = @((Model.t_instructions.OrderBy(m => m.display_order).FirstOrDefault() ?? new CMS_3D_Core.Models.EDM.t_instruction() { id_instruct = 0 }).id_instruct);


        let lint =@Model.directional_light_intensity;
        let lpx =@Model.directional_light_px;
        let lpy = @Model.directional_light_py;
        let lpz =@Model.directional_light_pz;
        let anbint = @Model.ambient_light_intensity;
        let _gammaOutput =@if(Model.gammaOutput==true){@Html.Raw("true;")} else{@Html.Raw("false;")};


        adarticle.startup(lint, lpx, lpy, lpz, anbint, _gammaOutput, str_url_prodobjectapi, id_startinst);


            /*
        //指定urlからデータを取得
        fetch(str_url_prodobjectapi)
            .then(response => {

                return response.json();

            })
            .then(data => { // 処理が成功した場合に取得されるJSONデータ

                //JSONのデータを各オブジェクトに詰め替える
                adarticle.data_import(data);

                //コントロールパネル領域を生成する
                adarticle.setup_control_panel_zone("control_panel_zone");

                //データモデルを取得する
                adarticle.setup_instance_part_model(glfLoader, scene);

                //表示領域を初期化する
                adarticle.initial_optional01();


                adarticle.initial_setup_and_render(lint, lpx, lpy,lpz, anbint, _gammaOutput);


                //adarticle.transition_instruction(1);
                adarticle.transition_instruction(id_startinst);

                //orbitコントロールモードを有効にし、レンダリングを開始する
                orbit_active = true;

                adarticle.render_orbital();
                //render_orbital();

            })
            .catch(error => { // エラーの場合の処理

                console.log(error);

            });
        */
    }

    //指定されたIDのインストラクションを表示する
    function transition_instruction2(id_instruct) {
        adarticle.transition_instruction(id_instruct);
    }



</script>
