@model CMS_3D_Core.Models.EDM.t_article

@{
    ViewData["Title"] = "EditProductInstruction";
}

<link rel="stylesheet" href="~/css/annotation.css" />

<h1>@Html.DisplayFor(model => model.title)</h1>



<button class="btn btn-primary" onclick="adarticle.DbUpdateInstruction()" >Save(Ajax)</button>

<p class="text-info">
    @ViewBag.ResultMsg
</p>


<div class="row">

    <div class="col-6" id="id_contents_models">

        <div id="annotations">
        </div>
        @*モデルの表示領域*@
        <canvas id="model_screen">
        </canvas>

        <div class="progress" id="div_progressbar_modeldl">
            <div class="progress-bar" role="progressbar" style="width: 0%" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100" id="progressbar_modeldl"></div>
        </div>
        <hr />

        <div id="control_panel_zone">
        </div>

        <hr />

        @*表示用ビューならここにインストラクションの表示領域がある*@
        <div id="preview_instruction_short_description"></div>

    </div>


    <div class="col-6" id="id_contents_instructions">
        <nav>
            <div class="nav nav-tabs" id="nav-tab" role="tablist">
                <a class="nav-link active" id="nav-instruction-tab" data-bs-toggle="tab" href="#nav-instruction">Instruction</a>
                <a class="nav-link" id="nav-preview-instruction-tab" data-bs-toggle="tab" href="#preview-instruction">Preview Instruction</a>
                <a class="nav-link" id="nav-viewinfo-tab" data-bs-toggle="tab" href="#nav-viewinfo">View</a>
                <a class="nav-link" id="nav-annotationinfo-tab" data-bs-toggle="tab" href="#nav-annotationinfo">Annotation</a>
                <a class="nav-link" id="nav-displayitemsinfo-tab" data-bs-toggle="tab" href="#nav-displayitemsinfo">Display Items Info</a>
                <a class="nav-link" id="nav-articlebase-tab" data-bs-toggle="tab" href="#nav-articlebase">Article Base</a>
                <a class="nav-link" id="nav-thumbnail-tab" data-bs-toggle="tab" href="#nav-thumbnail">Thumbnail</a>
                <a class="nav-link" id="nav-materials-tab" data-bs-toggle="tab" href="#nav-materials">Materials</a>
            </div>
        </nav>
        <div class="tab-content" id="nav-tabContent">

            <div class="tab-pane fade show active" id="nav-instruction">
                @await Component.InvokeAsync("EditProductInstruction", new { id_article = (Model ?? new CMS_3D_Core.Models.EDM.t_article() { id_article = 0 }).id_article })
            </div>

            <div class="tab-pane fade" id="preview-instruction">
            </div>

            <div class="tab-pane fade" id="nav-viewinfo">

                <h4> View Info and Edit</h4>

                @await Component.InvokeAsync("EditProductView", new { id_article = (Model ?? new CMS_3D_Core.Models.EDM.t_article() { id_article = 0 }).id_article })


                @await Component.InvokeAsync("ViewList", new { id_article = (Model ?? new CMS_3D_Core.Models.EDM.t_article() { id_article = 0 }).id_article })


                @Html.ActionLink("View", "Index", "t_view", new { id_article = (Model ?? new CMS_3D_Core.Models.EDM.t_article() { id_article = 0 }).id_article })

            </div>

            <div class="tab-pane fade" id="nav-annotationinfo">

                <h4> Annotation Info and Edit</h4>

                @await Component.InvokeAsync("EditProductAnnotation", new { id_article = (Model ?? new CMS_3D_Core.Models.EDM.t_article() { id_article = 0 }).id_article })

                <div id="id_view_operation_panel"></div>
            </div>

            <div class="tab-pane fade" id="nav-displayitemsinfo">

                <h4> DisplayItems Info and Edit</h4>

                @await Component.InvokeAsync("EditProductAnnotationDisplay", new { id_article = (Model ?? new CMS_3D_Core.Models.EDM.t_article() { id_article = 0 }).id_article })


            </div>



            <div class="tab-pane fade" id="nav-articlebase">

                <h4> View Info and Edit</h4>

                @await Component.InvokeAsync("EditArticle", new { id_article = (Model ?? new CMS_3D_Core.Models.EDM.t_article() { id_article = 0 }).id_article })

            </div>
            <div class="tab-pane fade" id="nav-thumbnail">

                <h4>Thumbnail</h4>

                @await Component.InvokeAsync("EditThumbnail", new { id_article = (Model ?? new CMS_3D_Core.Models.EDM.t_article() { id_article = 0 }).id_article })


            </div>

            <div class="tab-pane fade" id="nav-materials">

                <h4>Materials</h4>
                @await Component.InvokeAsync("DetatiMaterial", new { id_article = (Model ?? new CMS_3D_Core.Models.EDM.t_article() { id_article = 0 }).id_article })

            </div>
        </div>

    </div>
    <p id="debugel"></p>
</div>


<script src="~/lib/three/three.js"></script>
<script src="~/lib/three/Loader/GLTFLoader.js"></script>
<script src="~/lib/three/Loader/OBJLoader.js"></script>
<script src="~/lib/three/Loader/MTLLoader.js"></script>
<script src="~/lib/three/OrbitControls.js"></script>
<script src="~/lib/marked/marked.js"></script>
<script src="~/js/tdarticle.js"></script>
<script src="~/js/GetScreenshotForUpload.js"></script>


<script type="text/javascript">


    var adarticle = new TDArticle();


    // ロード後に実行される処理
    window.onload = function () {
        'use strict';

        @{
            var obj = (Model ?? new CMS_3D_Core.Models.EDM.t_article() { });
        }


        adarticle.id_article = @obj.id_article;
        adarticle.id_startinst = @((obj.t_instructions.OrderBy(m => m.display_order).FirstOrDefault() ?? new CMS_3D_Core.Models.EDM.t_instruction() { id_instruct = 0 }).id_instruct);
        adarticle.is_edit_mode = true;
        adarticle.startup();

        window.addEventListener("resize", resizewindow, false);

    }


    function resizewindow() {
        adarticle.onWindowResize();
    }

    function testup() {

        //str_url_partapi_base = "/ContentsEdit/postTorokuData?";
        str_url_partapi_base = "/ContentsOperatorForArticleApis/EditProductInstructionApi";

        let str_url_api = str_url_partapi_base;

        //const x = confirm('Are you update Instruction?');
        if (confirm('Are you update Instruction?')) {

            let updInstrruction = {
                id_article: document.getElementById('id_article').value,
                id_instruct: document.getElementById('instruction_id_instruct').value,
                id_view: document.getElementById('instruction_id_view').value,
                title: document.getElementById('instruction_title').value,
                short_description: document.getElementById('instruction_short_description').value,
                memo: document.getElementById('instruction_memo').value,
                display_order: document.getElementById('instruction_display_order').value
            };




            //指定urlからデータを取得
            //fetch内の各引数は以下の通り。
            //第1引数は【アクションメソッドのPath】、
            //第2引数は【通信方法 例)Get または　Post】、
            //第3引数は【データの型】
            //サンプル例：fetch(Path,{method:"POST",body:formData})
            const response = fetch(str_url_api, { //【重要ポイント】「await」句は削除すること
                method: "POST",
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(updInstrruction)  // リクエスト本文にJSON形式の文字列を設定c
            })
                .then(response => {

                    return response.json();

                }).then(data => { // 処理が成功した場合に取得されるJSONデータ


                    for (let i in data) {
                        console.log(data);// + ':' + data[i].ans);
                    }
                });
        }
        //console.log(x);


            //
    }
</script>
