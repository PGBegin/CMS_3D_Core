@model CMS_3D_Core.Models.EDM.t_assembly
@*  @model CMS_3D_Core.Models.EDM.t_assembly*@

@{
    ViewData["Title"] = "Contents:" + @Model.assy_name;
}



<div class="container">

    <div class="row">
        <h1>@Model.assy_name</h1>
        <div>
            <div id="model_screen">
                @*モデルの表示領域*@
            </div>
        </div>
        <hr />
        @*<div class="col-md-8 order-md-1">*@
        <div>
            <div id="instruction_data">

                <div id="control_panel_zone">
                    @*インストラクションの切り替えボタン表示領域*@
                </div>

                <hr />

                @*インストラクションの文書表示領域*@
                <h4 id="instruction_title"></h4>
                <div id="instruction_short_description">

                </div>
            </div>
        </div>
    </div>

</div>




@*<div id="content"></div>*@

<script src="~/lib/three/three.js"></script>
<script src="~/lib/three/Loader/GLTFLoader.js"></script>
<script src="~/lib/three/Loader/OBJLoader.js"></script>
<script src="~/lib/three/Loader/MTLLoader.js"></script>
<script src="~/lib/three/OrbitControls.js"></script>
<script src="~/lib/marked/marked.js"></script>
<script src="~/js/operation_3d_instructor.js"></script>


<script type="text/javascript">


    var camera_main;
    var scene = new THREE.Scene();
    var controls;

    var gridHelper;
    var axisHelper;
    var lightHelper;

    var light;
    var ambient;
    var renderer;
    var width = 720;
    var height = 405;

    var view_object = [];
    var instruction_gp = [];
    var instance_part = [];

    var orbit_active = false;


    // ロード後に実行される処理
    window.onload = function () {
        'use strict';

        var str_url_prodobjectapi_base = "/ContentsOperatorApis/GetAssemblyObjectList?";
        var str_url_prodobjectapi = str_url_prodobjectapi_base + new URLSearchParams({ id_assy: @Model.id_assy }).toString();

        var str_url_partapi_base = "/ContentsOperatorApis/GetPartObjectFile?";

        const glfLoader = new THREE.GLTFLoader();


        //指定urlからデータを取得
        fetch(str_url_prodobjectapi)
            .then(response => {

                return response.json();

            })
            .then(data => { // 処理が成功した場合に取得されるJSONデータ

                //JSONのデータを各オブジェクトに詰め替える
                data_inmprt(data, view_object, instruction_gp, instance_part);


                //コントロールパネル領域を生成する
                setup_control_panel_zone("control_panel_zone", instruction_gp);


                //データモデルを取得する
                setup_instance_part_model(str_url_partapi_base, instance_part, glfLoader, scene);

                //表示領域を初期化する
                initial_optional01();
                initial_setup_and_render();

                //orbitコントロールモードを有効にし、レンダリングを開始する
                orbit_active = true;
                render_orbital();

                //initial_setup_and_render2(scene, camera_main, controls, light, ambient, renderer, width, height);

            })
            .catch(error => { // エラーの場合の処理

                console.log(error);

            });

    }

    //指定されたIDのインストラクションを表示する
    function transition_instruction(id_ruct) {
        'use strict';


        orbit_active = false;

        //カメラ位置の変更
        //---------------------
        var i = instruction_gp[id_ruct].id_view;
        //controls.reset();

        //set_camera(camera_main, view_object[i].cam_pos_x, view_object[i].cam_pos_y, view_object[i].cam_pos_z,
        //    new THREE.Quaternion(view_object[i].cam_quat_x, view_object[i].cam_quat_y, view_object[i].cam_quat_z, view_object[i].cam_quat_w));

        //controls.target.set(view_object[i].obt_target_x, view_object[i].obt_target_y, view_object[i].obt_target_z);
        //controls.update();
        //---------------------


        // 視点のアニメーションによる移行
        // ------------------------------------------------------------------------------------------------
        var counter = 0;
        var step = 75;

        var pitch_px = (view_object[i].cam_pos_x - camera_main.position.x) / step;
        var pitch_py = (view_object[i].cam_pos_y - camera_main.position.y) / step;
        var pitch_pz = (view_object[i].cam_pos_z - camera_main.position.z) / step;

        var pitch_tx = (view_object[i].obt_target_x - controls.target.x) / step;
        var pitch_ty = (view_object[i].obt_target_y - controls.target.y) / step;
        var pitch_tz = (view_object[i].obt_target_z - controls.target.z) / step;

        function flight() {

            if (counter >= step) {
                orbit_active = true;

                render_orbital();
                return;
            } else {
                counter = counter + 1;
                requestAnimationFrame(flight);

                camera_main.position.x += pitch_px;
                camera_main.position.y += pitch_py;
                camera_main.position.z += pitch_pz;


                controls.target.x += pitch_tx;
                controls.target.y += pitch_ty;
                controls.target.z += pitch_tz;

                controls.update();
                renderer.render(scene, camera_main);

                //update_viewinfo();
            }
        }
        flight();




        //タイトルの表示
        var node_temp;
        //node_temp = document.getElementById('instruction_title');
        //node_temp.textContent = instruction_gp[id_ruct].title;


        //テキスト内容をマークダウン方式に変更して表示
        node_temp = document.getElementById('instruction_short_description');
        node_temp.innerHTML = marked(instruction_gp[id_ruct].short_description);
    }


    //表示関連を初期化する
    function initial_setup_and_render() {
        'use strict';

        // light
        light = new THREE.DirectionalLight(0xffffff, 1);
        light.position.set(0, 100, 30);
        scene.add(light);


        ambient = new THREE.AmbientLight(0x404040, 1);
        scene.add(ambient);

        // main camara
        camera_main = new THREE.PerspectiveCamera(45, width / height, 1, 1000);
        set_camera(camera_main, 30, 30, 30, new THREE.Quaternion(0.017, 0.168, -0.003, 0.985));

        // renderer
        renderer = new THREE.WebGLRenderer({ antialias: true });
        renderer.setSize(width, height);
        renderer.setClearColor(0xefefef);
        renderer.setPixelRatio(window.devicePixelRatio);
        document.getElementById('model_screen').appendChild(renderer.domElement);


        controls = new THREE.OrbitControls(camera_main, renderer.domElement);

        //レンダリングは仕様変更に伴いコメントアウト
        /*
        function render() {
            requestAnimationFrame(render);

            //update_viewinfo();

            controls.update();
            renderer.render(scene, camera_main);
        }
        render();*/

    };

    //通常の、orbit control有効状態でのレンダリング
    function render_orbital() {
        if (!orbit_active) { return; }
        requestAnimationFrame(render_orbital);


        controls.update();
        renderer.render(scene, camera_main);
    }

    //表示関連を初期化する
    function initial_optional01() {
        'use strict';


        //helper
        /*
        gridHelper = new THREE.GridHelper(200, 50);
        scene.add(gridHelper);


        axisHelper = new THREE.AxisHelper(1000);
        scene.add(axisHelper);
        */

        //lightHelper = new THREE.DirectionalLightHelper(light, 20);
        //scene.add(lightHelper);
    };

    function update_viewinfo() {


        document.getElementById('cam_pos_x').value = Math.floor(camera_main.position.x * 100) / 100;
        document.getElementById('cam_pos_y').value = Math.floor(camera_main.position.y * 100) / 100;
        document.getElementById('cam_pos_z').value = Math.floor(camera_main.position.z * 100) / 100;

        document.getElementById('cam_lookat_x').value = 0;
        document.getElementById('cam_lookat_y').value = 0;
        document.getElementById('cam_lookat_z').value = 0;

        document.getElementById('cam_quat_x').value = Math.floor(camera_main.quaternion.x * 1000) / 1000;
        document.getElementById('cam_quat_y').value = Math.floor(camera_main.quaternion.y * 1000) / 1000;
        document.getElementById('cam_quat_z').value = Math.floor(camera_main.quaternion.z * 1000) / 1000;
        document.getElementById('cam_quat_w').value = Math.floor(camera_main.quaternion.w * 1000) / 1000;

        document.getElementById('obt_target_x').value = Math.floor(controls.target.x * 100) / 100;
        document.getElementById('obt_target_y').value = Math.floor(controls.target.y * 100) / 100;
        document.getElementById('obt_target_z').value = Math.floor(controls.target.z * 100) / 100;

    }


</script>

